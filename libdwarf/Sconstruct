#
#	GRLibDWARF library build
#

# Python import modules:
import os
import SCons.Util

# Check if we are in a release build:
releaseBuild = int(ARGUMENTS.get('release', 0))

# Get the name of the OS system:
systemName = os.uname()[0]

archSpecified = ARGUMENTS.get('arch', 'None')
if archSpecified == 'None':
    archSpecified = 'x86_64'
machineType = archSpecified

buildRoot = ARGUMENTS.get('buildroot', 'None')
if buildRoot == 'None':
    buildRoot = 'CentOS6.2'

is64BitBuild = int(machineType.find("x86_64") != -1)

# Intermediate objects directory (.os files):
if releaseBuild:
	if is64BitBuild:
		objDir = "obj/x64/release"
	else:
		objDir = "obj/x86/release"
else:
	if is64BitBuild:
		objDir = "obj/x64/debug"
	else:
		objDir = "obj/x86/debug"

# Create the intermediate objects directory:
if not os.path.exists(objDir):
	os.makedirs(objDir)

# Preprocessor definitions:
if releaseBuild:
	cppDefinitions = ["NDEBUG", "_FILE_OFFSET_BITS=64", "_LARGE_FILES"]
else:
	cppDefinitions = ["_DEBUG", "_FILE_OFFSET_BITS=64", "_LARGE_FILES"]

# Compiler options and flags:
# With PIC enabled, the ELF APIs get added to PLT/GOT, which leads to dyanmic linking
# to some different libelf.[a|so] loaded during startup (e.g. libdw.so.1 of elfutils).
# Set visibility to hidden to prohibit ELF APIs entry in PLT/GOT, which will make sure
# right ELF APIs called. Refer - CODEXL3090.
cppCompilerFlags = ["-v", "-Wall", "-pthread", "-Wundef", "-Wno-unused-variable", "-fno-strict-aliasing", "-fPIC", "-fvisibility=hidden"]

if releaseBuild:
	cppCompilerFlags += ["-O3"]
else:
	cppCompilerFlags += ["-g"]

if (systemName == "Linux"):
    if (machineType == "x86"):
        cppCompilerFlags += ["-m32"]
    elif (machineType == "x86_64"):
        cppCompilerFlags += ["-m64"]

# Include path:
includePath = \
[
	".",
	"../common/",
	"../libelf/"
]

m4flags = ["-E", "-DSRCDIR=."]

# Define the compiler environment variables:
env = Environment(CPPDEFINES = cppDefinitions, CCFLAGS = cppCompilerFlags, CPPPATH = includePath, M4FLAGS = m4flags)

# Set the objects directory:
env.BuildDir(objDir, './', duplicate=0)

# Source files:
sources = \
[
    objDir + "/dwarf_abbrev.c",
    objDir + "/dwarf_arange.c",
    objDir + "/dwarf_attr.c",
    objDir + "/dwarf_attrval.c",
    objDir + "/dwarf_cu.c",
    objDir + "/dwarf_dealloc.c",
    objDir + "/dwarf_die.c",
    objDir + "/dwarf_dump.c",
    objDir + "/dwarf_errmsg.c",
    objDir + "/dwarf_finish.c",
    objDir + "/dwarf_form.c",
    objDir + "/dwarf_frame.c",
    objDir + "/dwarf_init.c",
    objDir + "/dwarf_lineno.c",
    objDir + "/dwarf_loclist.c",
    objDir + "/dwarf_macinfo.c",
    objDir + "/dwarf_pro_arange.c",
    objDir + "/dwarf_pro_attr.c",
    objDir + "/dwarf_pro_die.c",
    objDir + "/dwarf_pro_expr.c",
    objDir + "/dwarf_pro_finish.c",
    objDir + "/dwarf_pro_frame.c",
    objDir + "/dwarf_pro_init.c",
    objDir + "/dwarf_pro_lineno.c",
    objDir + "/dwarf_pro_macinfo.c",
    objDir + "/dwarf_pro_reloc.c",
    objDir + "/dwarf_pro_sections.c",
    objDir + "/dwarf_ranges.c",
    objDir + "/dwarf_reloc.c",
    objDir + "/dwarf_seterror.c",
    objDir + "/dwarf_str.c",
    objDir + "/libdwarf_abbrev.c",
    objDir + "/libdwarf_arange.c",
    objDir + "/libdwarf_attr.c",
    objDir + "/libdwarf.c",
    objDir + "/libdwarf_die.c",
    objDir + "/libdwarf_elf_access.c",
    objDir + "/libdwarf_elf_init.c",
    objDir + "/libdwarf_error.c",
    objDir + "/libdwarf_frame.c",
    objDir + "/libdwarf_info.c",
    objDir + "/libdwarf_init.c",
    objDir + "/libdwarf_lineno.c",
    objDir + "/libdwarf_loc.c",
    objDir + "/libdwarf_loclist.c",
    objDir + "/libdwarf_macinfo.c",
    objDir + "/libdwarf_nametbl.c",
    objDir + "/libdwarf_ranges.c",
    objDir + "/libdwarf_reloc.c",
    objDir + "/libdwarf_rw.c",
    objDir + "/libdwarf_sections.c",
    objDir + "/libdwarf_str.c",
]

# m4 files require explicit generation on a per-file basis
m4_gen = []
env.M4
m4_gen += env.M4(target = 'dwarf_funcs.c', source = 'dwarf_funcs.m4')
m4_gen += env.M4(target = 'dwarf_nametbl.c', source = 'dwarf_nametbl.m4')
m4_gen += env.M4(target = 'dwarf_pro_funcs.c', source = 'dwarf_pro_funcs.m4')
m4_gen += env.M4(target = 'dwarf_pro_nametbl.c', source = 'dwarf_pro_nametbl.m4')
m4_gen += env.M4(target = 'dwarf_pro_pubnames.c', source = 'dwarf_pro_pubnames.m4')
m4_gen += env.M4(target = 'dwarf_pro_types.c', source = 'dwarf_pro_types.m4')
m4_gen += env.M4(target = 'dwarf_pro_vars.c', source = 'dwarf_pro_vars.m4')
m4_gen += env.M4(target = 'dwarf_pro_weaks.c', source = 'dwarf_pro_weaks.m4')
m4_gen += env.M4(target = 'dwarf_pubnames.c', source = 'dwarf_pubnames.m4')
m4_gen += env.M4(target = 'dwarf_pubtypes.c', source = 'dwarf_pubtypes.m4')
m4_gen += env.M4(target = 'dwarf_types.c', source = 'dwarf_types.m4')
m4_gen += env.M4(target = 'dwarf_vars.c', source = 'dwarf_vars.m4')
m4_gen += env.M4(target = 'dwarf_weaks.c', source = 'dwarf_weaks.m4')

# Linker flags:
if releaseBuild:
	linkerFlags = \
	[
		"-s"
	]
else:
	linkerFlags = \
	[
	]

# Library name:
libName = "dwarf"

if (systemName == "Linux"):
    if (machineType == "x86"):
        linkerFlags += ["-m32"]
    elif (machineType == "x86_64"):
        linkerFlags += ["-m64"]

# Install directory:
# Model after other Common projects:
#   Build/<os>/<machinetype>/[debug|release]/lib
installDir="Build/" + buildRoot + "/" + machineType
if releaseBuild:
	installDir += "/release"
else:
	installDir += "/debug"
installDir += "/lib"

# Create a shared library:
lib = env.StaticLibrary(installDir + "/" + libName, sources + m4_gen, LINKFLAGS=linkerFlags)

env.Alias("install", installDir)
